---

- name: Ensure dependencies are installed
  ansible.builtin.apt:
    name: '{{ item }}'
  loop: '{{ evodomains_dependencies }}'

- name: "Remount /usr RW if needed"
  ansible.builtin.include_role:
    name: remount-usr

### TMP task ###

- name: Remove {{ evodomains_script_name }} script from local sbin
  ansible.builtin.file:
    path: '/usr/local/sbin/{{ evodomains_script_name }}'
    state: absent

################

- name: Copy {{ evodomains_script_name }} script to local bin
  ansible.builtin.copy:
    src: '{{ evodomains_script_name }}.py'
    dest: '/usr/local/bin/{{ evodomains_script_name }}'
    mode: '0700'

- name: Copy {{ evodomains_script_name }} completion script
  ansible.builtin.copy:
    src: '{{ evodomains_script_name }}_completion'
    dest: '/etc/bash_completion.d/{{ evodomains_script_name }}_completion'
    mode: "0644"

- name: Directory {{ evodomains_conf_path }} exists
  ansible.builtin.file:
    path: '{{ evodomains_conf_path }}'
    state: directory

### TMP tasks ###

- name: Old configuration directory
  ansible.builtin.stat:
    path: /etc/evolinux/domains
  register: old_conf_dir

- name: Copy old configuration directory to the new one
  ansible.builtin.copy:
    src: /etc/evolinux/domains/
    dest: '{{ evodomains_conf_path }}'
    remote_src: true
  when: old_conf_dir.stat.isdir is defined and old_conf_dir.stat.isdir

- name: Remove old configuration directory
  ansible.builtin.file:
    path: /etc/evolinux/domains
    state: absent
  when: old_conf_dir.stat.isdir is defined and old_conf_dir.stat.isdir

#################

- name: Create config file {{ domains_conf_file_ignored_domains_list }}
  ansible.builtin.blockinfile:
    path: '{{ evodomains_conf_path }}/{{ evodomains_conf_file_ignored_domains_list }}'
    create: true
    marker: '### {mark} ANSIBLE MANAGED HEADER'
    insertbefore: BOF
    block: |
      # Domains to exclude from check with command 'evodomains check-dns'.
      # Format: one domain per line, regex and wildcards not supported.

- name: Create config file {{ evodomains_conf_file_included_domains_list }}
  ansible.builtin.blockinfile:
    path: '{{ evodomains_conf_path }}/{{ evodomains_conf_file_included_domains_list }}'
    create: true
    marker: '### {mark} ANSIBLE MANAGED HEADER'
    insertbefore: BOF
    block: |
      # Domains to check explicitely with command 'evodomains check-dns'.
      # This is useful to check a domain that is not in supported confs
      # (Apache, Nginx, SSL certsâ€¦).
      # Format: one domain per line, regex and wildcards not supported.

- name: Create config file {{ evodomains_conf_file_allowed_ips_list }}
  ansible.builtin.blockinfile:
    path: '{{ evodomains_conf_path }}/{{ evodomains_conf_file_allowed_ips_list }}'
    create: true
    marker: '### {mark} ANSIBLE MANAGED HEADER'
    insertbefore: BOF
    block: |
      # External IPs allowed with command 'evodomains check-dns'.
      # This is useful for load-balanced domains or NAT.
      # Note: the network interfaces IPs of the server are allowed by default.
      # Format: one IP per line, regex and wildcards not supported.

- name: Create config file {{ evodomains_conf_file_wildcard_replacements }}
  ansible.builtin.blockinfile:
    path: '{{ evodomains_conf_path }}/{{ evodomains_conf_file_wildcard_replacements }}'
    create: true
    marker: '### {mark} ANSIBLE MANAGED HEADER'
    insertbefore: BOF
    block: |
      # Domains to check for wildcards with command 'evodomains check-dns'
      # By default, wildcards like *.example.com are replaced by www.example.com.
      # Format: one wildcard par line 'WILDCARD_DOMAIN REPLACEMENT_DOMAIN'

- name: Add default allowed IPs in config file
  ansible.builtin.lineinfile:
    path: '{{ evodomains_conf_path }}/{{ evodomains_conf_file_allowed_ips_list }}'
    line: '{{ item }}'
  loop: '{{ evodomains_allowed_ips }}'

