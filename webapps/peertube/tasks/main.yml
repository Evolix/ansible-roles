---
# tasks file for peertube install

- name: APT sources
  ansible.builtin.include_tasks: apt_sources.yml

- name: Install main system dependencies
  ansible.builtin.apt:
    name: "{{ peertube_system_dep }}"
    update_cache: true

- name: Upgrade redis-server to the latest version from bullseye-backports on Debian 11
  ansible.builtin.apt:
    name: redis-server
    state: latest
    default_release: bullseye-backports
  when: ansible_distribution_major_version is version('11')

- name: Add UNIX account
  ansible.builtin.user:
    name: "{{ peertube_instance }}"
    home: "{{ peertube_instance_home }}"
    shell: /bin/bash

- name: Add PostgreSQL user
  community.postgresql.postgresql_user:
    name: "{{ peertube_db_user }}"
    password: "{{ peertube_db_password }}"
    no_password_changes: true
  become_user: postgres

- name: Add PostgreSQL database
  community.postgresql.postgresql_db:
    name: "{{ peertube_db_name }}"
    owner: "{{ peertube_db_user }}"
    template: template0
    encoding: UTF-8
  become_user: postgres

- name: Add dirs required by peertube
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/config"
    - "~/storage"
    - "~/versions"
  become_user: "{{ peertube_instance }}"

- name: Unarchive peertube archive
  ansible.builtin.unarchive:
    src: "{{ peertube_download_url }}"
    dest: ~/versions
    remote_src: true
  become_user: "{{ peertube_instance }}"

- name: Symbolic link to unarchived version
  ansible.builtin.file:
    src: "~/versions/peertube-{{ peertube_version }}"
    dest: "~/peertube-latest"
    state: link
  become_user: "{{ peertube_instance }}"

- name: Install PeerTube nodejs deps (via yarn)
  ansible.builtin.shell: "yarn install --production --pure-lockfile"
  args:
    chdir: "~/peertube-latest"
  become_user: "{{ peertube_instance }}"

- name: Copy default.yaml to prod dir
  ansible.builtin.copy:
    src: "~/peertube-latest/config/default.yaml"
    dest: "~/config/default.yaml"
    mode: '0644'
    remote_src: true
  become_user: "{{ peertube_instance }}"

- name: Template peertube conf file
  ansible.builtin.template:
    src: "production.yaml.j2"
    dest: "~/config/production.yaml"
    mode: '0644'
  become_user: "{{ peertube_instance }}"

- name: Template peertube systemd unit
  ansible.builtin.template:
    src: "peertube.service.j2"
    dest: "/etc/systemd/system/{{ peertube_instance }}.service"
    mode: '0600'

- name: Start peertube systemd unit
  ansible.builtin.systemd:
    name: "{{ peertube_instance }}"
    enabled: true
    state: started

- name: Check if SSL certificate is present and register result
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ peertube_domains | first }}/fullchain.pem"
  register: ssl

- name: Generate certificate only if required (first time)
  when: not ssl.stat.exists
  block:
    - name: Template vhost without SSL for successfull LE challengce
      ansible.builtin.template:
        src: "vhost.conf.j2"
        dest: "/etc/nginx/sites-available/{{ peertube_instance }}.conf"
        mode: '0600'
    - name: Enable temporary nginx vhost for peertube
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ peertube_instance }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ peertube_instance }}.conf"
        state: link
    - name: Reload nginx conf
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
    - name: Make sure /var/lib/letsencrypt exists and has correct permissions
      ansible.builtin.file:
        path: /var/lib/letsencrypt
        state: directory
        mode: '0755'
    - name: Generate certificate with certbot
      ansible.builtin.command:
        cmd: |
          certbot certonly --webroot
           --webroot-path /var/lib/letsencrypt
           --non-interactive
           --agree-tos
           --email {{ peertube_certbot_admin_email }}
           -d {{ peertube_domains | first }}

- name: (Re)check if SSL certificate is present and register result
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ peertube_domains | first }}/fullchain.pem"
  register: ssl

- name: (Re)template conf file for nginx vhost with SSL
  ansible.builtin.template:
    src: "vhost.conf.j2"
    dest: "/etc/nginx/sites-available/{{ peertube_instance }}.conf"
    mode: '0600'

- name: Enable nginx vhost for peertube
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ peertube_instance }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ peertube_instance }}.conf"
    state: link

- name: Reload nginx conf
  ansible.builtin.systemd:
    name: nginx
    state: reloaded

- name: Adjust permissions of files/folders for nginx
  ansible.builtin.file:
    path: "~/"
    state: directory
    mode: 'o=rX'
    recurse: true
  become_user: "{{ peertube_instance }}"
