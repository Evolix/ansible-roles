---
# tasks file for privatebin install

- name: Install main system dependencies
  ansible.builtin.apt:
    name: "{{ privatebin_system_dep }}"
    update_cache: true

- name: Add UNIX account
  ansible.builtin.user:
    name: "{{ privatebin_instance }}"
    shell: /bin/bash

- name: Clone privatebin repo (git)
  ansible.builtin.git:
    repo: "{{ privatebin_git_url }}"
    dest: "~/PrivateBin/"
    version: "{{ privatebin_git_version | default(omit) }}"
    update: true
    force: true
    umask: '0022'
  become_user: "{{ privatebin_instance }}"

- name: Check if SSL certificate is present and register result
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ privatebin_domains | first }}/fullchain.pem"
  register: ssl

- name: Generate certificate only if required (first time)
  when: not ssl.stat.exists
  block:
    - name: Template vhost without SSL for successfull LE challengce
      ansible.builtin.template:
        src: "vhost.conf.j2"
        dest: "/etc/apache2/sites-available/{{ privatebin_instance }}.conf"
        mode: '0600'
      notify: reload apache
    - name: Enable apache vhost for privatebin
      ansible.builtin.command:
        cmd: "/usr/sbin/a2ensite {{ privatebin_instance }}"
      notify: reload apache
    - name: Flush handlers
      ansible.builtin.meta: flush_handlers
    - name: Generate certificate with certbot
      ansible.builtin.command:
        cmd: |
          certbot certonly
           --webroot
           --webroot-path /var/lib/letsencrypt
           --non-interactive
           --agree-tos
           --email {{ privatebin_certbot_admin_email }}
           -d {{ privatebin_domains | first }}
    - name: Create the ssl dir if needed
      ansible.builtin.file:
        path: /etc/apache2/ssl
        state: directory
        mode: '0750'
    - name: Template ssl block for apache vhost
      ansible.builtin.template:
        src: "ssl.conf.j2"
        dest: "/etc/apache2/ssl/{{ privatebin_instance }}.conf"
        mode: '0600'
      notify: reload apache

- name: (Re)check if SSL certificate is present and register result
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ privatebin_domains | first }}/fullchain.pem"
  register: ssl

- name: (Re)template conf file for apache vhost with SSL
  ansible.builtin.template:
    src: "vhost.conf.j2"
    dest: "/etc/apache2/sites-available/{{ privatebin_instance }}.conf"
    mode: '0600'
  notify: reload apache

- name: Enable apache mode_rewrite
  ansible.builtin.command:
    cmd: "/usr/sbin/a2enmod ssl rewrite"
  notify: restart apache

- name: Enable .htaccess configuration
  ansible.builtin.copy:
    src: "~/PrivateBin/.htaccess.disabled"
    dest: "~/PrivateBin/.htaccess"
    mode: '0600'
    remote_src: true
  become_user: "{{ privatebin_instance }}"

- name: Creates directory outside DocumentRoot
  ansible.builtin.file:
    path: "~/secret"
    state: directory
    mode: '0700'
  become_user: "{{ privatebin_instance }}"
  register: directory

- name: Move some directories outside DocumentRoot
  ansible.builtin.shell:
    cmd: "mv {bin,cfg,doc,lib,tpl,tst,vendor} ~/secret/"
    chdir: "~/PrivateBin/"
    executable: /bin/bash
  become_user: "{{ privatebin_instance }}"
  when: directory.changed

- name: Ajust path needed for directories outside DocumentRoot
  ansible.builtin.lineinfile:
    path: "~/PrivateBin/index.php"
    regexp: ^define\('PATH', ''\);
    line: define('PATH', '../secret/');
  become_user: "{{ privatebin_instance }}"

- name: Enable apache vhost for privatebin
  ansible.builtin.command:
    cmd: "/usr/sbin/a2ensite {{ privatebin_instance }}"
  notify: reload apache
