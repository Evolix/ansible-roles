---
# tasks file for gitea install

- name: Install main system dependencies
  ansible.builtin.apt:
    name: "{{ gitea_system_dep }}"
    update_cache: true

- name: Remount /usr as RW
  ansible.builtin.command:
    cmd: mount -o remount,rw /usr

- name: Download gitea binary
  ansible.builtin.get_url:
    url: "{{ gitea_url }}"
    dest: /usr/local/bin
    checksum: "{{ gitea_checksum }}"
    mode: '0755'

- name: Create symbolic link
  ansible.builtin.file:
    src: "/usr/local/bin/gitea-{{ gitea_git_version }}-linux-amd64"
    dest: "/usr/local/bin/gitea"
    state: link

- name: Remount /usr as RO
  ansible.builtin.command:
    cmd: mount -o remount,ro /usr

- name: Add redis UNIX account
  ansible.builtin.user:
    name: "redis-{{ gitea_instance }}"
#    shell: /bin/bash

- name: Add gitea UNIX account
  ansible.builtin.user:
    name: "{{ gitea_instance }}"
    shell: /bin/bash
    groups: "redis-{{ gitea_instance }}"
    append: yes

- name: Add www-data (nginx) to instance group
  ansible.builtin.user:
    name: www-data
    # group: www-data
    groups: "{{ gitea_instance }}"
    append: true

- name: Add database
  community.mysql.mysql_db:
    name: "{{ gitea_db_name }}"

- name: Add database user
  community.mysql.mysql_user:
    name: "{{ gitea_db_user }}"
    password: "{{ gitea_db_password }}"
    priv: "{{ gitea_db_name }}.*:{{ privileges | default('SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,CREATE TEMPORARY TABLES') }}"
    update_password: on_create

- name: Create the gitea conf dir if needed
  ansible.builtin.file:
    path: /etc/gitea
    state: directory
    mode: '0755'

- name: Template gitea ini file
  ansible.builtin.template:
    src: "gitea.ini.j2"
    dest: "/etc/gitea/{{ gitea_instance }}.ini"
    owner: 'root'
    group: "{{ gitea_instance }}"
    mode: '0660'

- name: Template gitea systemd unit
  ansible.builtin.template:
    src: "gitea.service.j2"
    dest: "/etc/systemd/system/gitea@.service"
    mode: '0644'

- name: Start gitea systemd unit
  ansible.builtin.systemd:
    name: "gitea@{{ gitea_instance }}"
    state: restarted
    enabled: true

- name: Create the redis directories if needed
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "redis-{{ gitea_instance }}"
    group: "redis-{{ gitea_instance }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: "/etc/redis-{{ gitea_instance }}", mode: "0750" }
    - { path: "/etc/redis-{{ gitea_instance }}/redis-server.pre-up.d", mode: "0750" }
    - { path: "/etc/redis-{{ gitea_instance }}/redis-server.post-up.d", mode: "0750" }
    - { path: "/etc/redis-{{ gitea_instance }}/redis-server.pre-down.d", mode: "0750" }
    - { path: "/etc/redis-{{ gitea_instance }}/redis-server.post-down.d", mode: "0750" }
    - { path: "/var/lib/redis-{{ gitea_instance }}",  mode: "0750" }
    - { path: "/var/log/redis-{{ gitea_instance }}",  mode: "0750" }
    - { path: "/var/run/redis-{{ gitea_instance }}", mode: "0750" }

- name: Template redis conf
  ansible.builtin.template:
    src: "redis.conf.j2"
    dest: "/etc/redis-{{ gitea_instance }}/redis.conf"
    owner: "redis-{{ gitea_instance }}"
    group: "redis-{{ gitea_instance }}"
    mode: '0640'

- name: Disable defaut redis systemd unit
  ansible.builtin.systemd:
    name: redis
    enabled: false

- name: Template redis systemd unit
  ansible.builtin.template:
    src: "redis-server.service.j2"
    dest: "/etc/systemd/system/redis-server@.service"

- name: Start redis systemd unit
  ansible.builtin.systemd:
    name: "redis-server@{{ gitea_instance }}"
    state: started

- name: Check if SSL certificate is present and register result
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ gitea_domains | first }}/fullchain.pem"
  register: ssl

- name: Generate certificate only if required (first time)
  when: not ssl.stat.exists
  block:
    - name: Template vhost without SSL for successfull LE challengce
      ansible.builtin.template:
        src: "vhost.conf.j2"
        dest: "/etc/nginx/sites-available/{{ gitea_instance }}.conf"
    - name: Enable temporary nginx vhost for gitea
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ gitea_instance }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ gitea_instance }}.conf"
        state: link
    - name: Reload nginx conf
      ansible.builtin.systemd:
        name: nginx
        state: reloaded
    - name: Generate certificate with certbot
      ansible.builtin.command:
        cmd: |
          certbot certonly --webroot --webroot-path /var/lib/letsencrypt
           --non-interactive
           --agree-tos
           --email {{ gitea_certbot_admin_email }}
           -d {{ gitea_domains | first }}
#    - name: Create the ssl dir if needed
#      ansible.builtin.file:
#        path: /etc/nginx/ssl
#        state: directory
#        mode: '0750'
#    - name: Template ssl bloc for nginx vhost
#      ansible.builtin.template:
#        src: "ssl.conf.j2"
#        dest: "/etc/nginx/ssl/{{ gitea_domains | first }}.conf"

- name: (Re)check if SSL certificate is present and register result
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ gitea_domains | first }}/fullchain.pem"
  register: ssl

- name: (Re)template conf file for nginx vhost with SSL
  ansible.builtin.template:
    src: "vhost.conf.j2"
    dest: "/etc/nginx/sites-available/{{ gitea_instance }}.conf"
    mode: '0600'

- name: Enable nginx vhost for gitea
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ gitea_instance }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ gitea_instance }}.conf"
    state: link

- name: Reload nginx conf
  ansible.builtin.systemd:
    name: nginx
    state: reloaded
