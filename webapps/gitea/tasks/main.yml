---
# tasks file for gitea install

- name: Install main system dependencies
  apt:
    name: "{{ gitea_system_dep }}"
    update_cache: yes

- name: Download gitea binary
  get_url:
    url: "{{ gitea_url }}"
    dest: /usr/local/bin
    checksum: "{{ gitea_checksum }}"
    mode: '0755'

- name: Create symbolic link
  file:
    src: "/usr/local/bin/gitea-{{ gitea_git_version }}-linux-amd64"
    dest: "/usr/local/bin/gitea"
    state: link

- name: Add UNIX account
  user:
    name: "{{ gitea_service }}"
    shell: /bin/bash

- name: Add www-data (nginx) to service's group
  user:
    name: www-data
    #group: www-data
    groups: "{{ gitea_service }}"
    append: true

- name: Add database
  mysql_db:
    name: "{{ gitea_db_name }}"

- name: Add database user
  mysql_user:
    name: "{{ gitea_db_user }}"
    password: "{{ gitea_db_password }}"
    priv: "{{ gitea_db_name }}.*:{{privileges |default('SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,CREATE TEMPORARY TABLES')}}"
    update_password: on_create

- name: Create the gitea conf dir if needed
  file:
    path: /etc/gitea
    state: directory
    mode: '0755'

- name: Template gitea ini file
  template: 
    src: "gitea.ini.j2"
    dest: "/etc/gitea/{{ gitea_service }}.ini"
    owner: 'root'
    group: "{{ gitea_service }}"
    mode: '0660'

- name: Template gitea systemd unit
  template: 
    src: "gitea.service.j2"
    dest: "/etc/systemd/system/gitea@.service"

- name: Start gitea systemd unit
  service:
    name: "gitea@{{ gitea_service }}"
    state: restarted

- name: Create the redis dir if needed
  file:
    path: /home/{{ gitea_service }}/redis
    state: directory
    owner: "{{ gitea_service }}"
    group: "{{ gitea_service }}"
    mode: '0750'

- name: Create the log dir if needed
  file:
    path: /home/{{ gitea_service }}/log
    state: directory
    owner: "{{ gitea_service }}"
    group: "{{ gitea_service }}"
    mode: '0750'

- name: Template redis conf
  template: 
    src: "redis.conf.j2"
    dest: "/home/{{ gitea_service }}/redis/redis.conf"
    owner: "{{ gitea_service }}"
    group: "{{ gitea_service }}"
    mode: '0640'

- name: Template redis systemd unit
  template: 
    src: "redis.service.j2"
    dest: "/etc/systemd/system/redis@.service"

- name: Start redis systemd unit
  service:
    name: "redis@{{ gitea_service }}"
    state: started

- name: Template nginx snippet for Let's Encrypt/Certbot
  template: 
    src: "letsencrypt.conf.j2"
    dest: "/etc/nginx/snippets/letsencrypt.conf"

- name: Check if SSL certificate is present and register result
  stat:
    path: "/etc/letsencrypt/live/{{ gitea_domains |first }}/fullchain.pem"
  register: ssl

- name: Generate certificate only if required (first time)
  block:
  - name: Template vhost without SSL for successfull LE challengce
    template: 
      src: "vhost.conf.j2"
      dest: "/etc/nginx/sites-available/{{ gitea_service }}.conf"
  - name: Enable temporary nginx vhost for gitea
    file:
      src: "/etc/nginx/sites-available/{{ gitea_service }}.conf"
      dest: "/etc/nginx/sites-enabled/{{ gitea_service }}.conf"
      state: link
  - name: Reload nginx conf
    service:
      name: nginx
      state: reloaded
  - name: Make sure /var/lib/letsencrypt exists and has correct permissions
    file: 
      path: /var/lib/letsencrypt
      state: directory
      mode: '0755'
  - name: Generate certificate with certbot
    shell: certbot certonly --webroot --webroot-path /var/lib/letsencrypt --non-interactive --agree-tos --email {{ gitea_certbot_admin_email }} -d {{ gitea_domains |first }}
  - name: Create the ssl dir if needed
    file:
      path: /etc/nginx/ssl
      state: directory
      mode: '0750'
  - name: Template ssl bloc for nginx vhost
    template: 
      src: "ssl.conf.j2"
      dest: "/etc/nginx/ssl/{{ gitea_domains |first }}.conf"
  when: ssl.stat.exists != true

- name: (Re)check if SSL certificate is present and register result
  stat:
    path: "/etc/letsencrypt/live/{{ gitea_domains |first }}/fullchain.pem"
  register: ssl

- name: (Re)template conf file for nginx vhost with SSL
  template:
    src: "vhost.conf.j2"
    dest: "/etc/nginx/sites-available/{{ gitea_service }}.conf"

- name: Enable nginx vhost for gitea
  file:
    src: "/etc/nginx/sites-available/{{ gitea_service }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ gitea_service }}.conf"
    state: link

- name: Reload nginx conf
  service:
    name: nginx
    state: reloaded
