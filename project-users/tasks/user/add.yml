---

# =================
# Unix account
# =================

- ansible.builtin.fail:
    msg: "You must provide a value for the 'user.name ' variable."
  when: (user.name is not defined) or (user.name | length == 0)

- ansible.builtin.fail:
    msg: "You must provide a value for the 'user.uid ' variable."
  when: (user.uid is not defined) or (user.uid | string | length == 0)

- name: "Test if '{{ user.name }}' exists"
  ansible.builtin.command:
    cmd: 'id -u "{{ user.name }}"'
  register: get_id_from_login
  failed_when: False
  changed_when: False
  check_mode: no

- name: "Test if uid '{{ user.uid }}' exists"
  ansible.builtin.command:
    cmd: 'id -un -- "{{ user.uid }}"'
  register: get_login_from_id
  failed_when: False
  changed_when: False
  check_mode: no

# Error if
# the uid already exists
# and the user associated with this uid is not the desired user
- name: "Fail if uid already exists for another user"
  ansible.builtin.fail:
    msg: "Uid '{{ user.uid }}' is already used by '{{ get_login_from_id.stdout }}'. You must change uid for '{{ user.name }}'"
  when:
    - get_login_from_id.rc == 0
    - get_login_from_id.stdout != user.name

# Create/Update the user account with defined uid if
# the user doesn't already exist and the uid isn't already used
# or the user exists with the defined uid
- name: "Unix account for '{{ user.name }}' is present (with uid '{{ user.uid }}')"
  ansible.builtin.user:
    state: present
    uid: '{{ user.uid }}'
    name: '{{ user.name }}'
    comment: '{{ user.fullname | default(user.name) }}'
    shell: "{{ user.shell | default('/bin/bash') }}"
    password: '{{ user.password_hash }}'
    update_password: "{{ user.update_password | default('always') }}"
  when:
    - (get_id_from_login.rc != 0 and get_login_from_id.rc != 0) \
      or (get_id_from_login.rc == 0 and get_login_from_id.stdout == user.name)

# Create/Update the user account without defined uid if
# the user doesn't already exist but the defined uid is already used
# or another user already exists with a the same uid
- name: "Unix account for '{{ user.name }}' is present (with random uid)"
  ansible.builtin.user:
    state: present
    name: '{{ user.name }}'
    comment: '{{ user.fullname | default(user.name) }}'
    shell: "{{ user.shell | default('/bin/bash') }}"
    password: '{{ user.password_hash }}'
    update_password: "{{ user.update_password | default('always') }}"
  when:
    - (get_id_from_login.rc != 0 and get_login_from_id.rc == 0) \
      or (get_id_from_login.rc == 0 and get_login_from_id.stdout != user.name)

# We need to re-test if the user exist
# because in check mode it wouldn't be created and subsequent tasks would fail
- name: "Re-test if '{{ user.name }}' exists"
  ansible.builtin.command:
    cmd: "getent passwd {{ user.name }}"
  register: check_user
  failed_when: False
  changed_when: False
  check_mode: no

# =================
# Unix groups
# =================

- name: Determine available groups
  ansible.builtin.getent:
    database: group

- name: "Secondary groups are mixed for '{{ user.name }}'"
  ansible.builtin.set_fact:
    _secondary_groups: "{{ [project_users_main_group] | union(user.groups | default([])) | sort | unique | list }}"

- name: "Create secondary group ({{ _secondary_groups | join(',') }})"
  ansible.builtin.group:
    name: "{{ group }}"
    system: true
  loop: "{{ _secondary_groups }}"
  loop_control:
    loop_var: group

- name: "Add user {{ user.name }} to secondary groups ({{ _secondary_groups | join(',') }}"
  ansible.builtin.user:
    name: "{{ user.name }}"
    groups: "{{ _secondary_groups | join(',') }}"
    append: yes

## Group for SSH authorizations

- name: "Unix user {{ user.name }} belongs to group '{{ evolinux_ssh_group }}' (Debian 10 or later)"
  ansible.builtin.user:
    name: "{{ user.name }}"
    groups: "{{ evolinux_ssh_group | mandatory }}"
    append: yes
  when: ansible_distribution_major_version is version('10', '>=')

## Home protection

- name: "Home directory for '{{ user.name }}' is not accessible by group and other users"
  ansible.builtin.file:
    path: "/home/{{ user.name }}"
    mode: "{{ project_users_homedir_mode }}"
    state: directory
  when: check_user.rc == 0

## SSH

- ansible.builtin.include: ssh.yml

## Evomaintenance

- name: "Evomaintenance trap is configured for '{{ user.name }}'"
  ansible.builtin.blockinfile:
    dest: "/home/{{ user.name }}/.profile"
    insertafter: EOF
    marker: "# {mark} ANSIBLE MANAGED EVOMAINTENANCE TRAP"
    content: "{{ project_evomaintenance_trap_command }}"
    state: "{{ (user.groups is defined and project_users_sudoers_group in user.groups) | ternary('present','absent') }}"
  when:
    - project_users_sudoers_group is defined
    - project_users_sudoers_group != none
    - project_users_sudoers_group | length > 0

- ansible.builtin.meta: flush_handlers

