---

# =================
# Unix account
# =================

- ansible.builtin.assert:
    that:
      - user.name is defined
      - user.name != none
      - user.name | length > 0
    msg: "You must provide a value for the 'user.name ' variable."

# If a User exist by that name it will return:
# * rc = 0
# * stdout = UID
# If no User exists by that name it will return:
# * rc = 1
# * stdout = empty
- name: "Test if '{{ user.name }}' exists"
  ansible.builtin.command:
    cmd: 'id -u "{{ user.name }}"'
  register: _user_id_from_name
  failed_when: False
  changed_when: False
  check_mode: no

- ansible.builtin.debug:
    var: _user_id_from_name
    verbosity: 1

# If a User exist by that UID it will return:
# * rc = 0
# * stdout = username
# If no User exists by that UID it will return:
# * rc = 1
# * stdout = empty
- name: "Test if uid '{{ user.uid }}' exists"
  ansible.builtin.command:
    cmd: 'id -un -- "{{ user.uid }}"'
  register: _user_name_from_id
  failed_when: False
  changed_when: False
  check_mode: no

- ansible.builtin.debug:
    var: _user_name_from_id
    verbosity: 1

- ansible.builtin.debug:
    var: project_users_strict_uid
    verbosity: 1

- name: "In strict mode, UID/name must match for '{{ user.name }}' (look by name)"
  ansible.builtin.assert:
    that:
      # User exists with wrong UID
      # …or User doesn't exist by wanted UID is already used
      - user.uid | string == _user_id_from_name.stdout
    msg: "User {{ user.name }} exists but with UID {{ _user_id_from_name.stdout }} instead of {{ user.uid }}"
  when:
    # Strict mode
    - project_users_strict_uid | bool
    # user.uid is set
    - user.uid is defined and user.uid != none and (user.uid | string | length > 0)
    # User exists
    - _user_id_from_name.rc == 0

- name: "In strict mode, UID/name must match for '{{ user.name }}' (look by UID)"
  ansible.builtin.assert:
    that:
      # User exists with wrong UID
      # …or User doesn't exist by wanted UID is already used
      - user.name == _user_name_from_id.stdout
    msg: "UID {{ user.uid }} is already used by user {{ _user_name_from_id.stdout }} instead of {{ user.name }}"
  when:
    # Strict mode
    - project_users_strict_uid | bool
    # user.uid is set
    - user.uid is defined and user.uid != none and (user.uid | string | length > 0)
    # UID is used
    - _user_name_from_id.rc == 0


- name: "Unix account '{{ user.name }}' is present with uid '{{ user.uid }}'"
  ansible.builtin.user:
    uid: "{{ user.uid }}"
    name: "{{ user.name }}"
    comment: "{{ user.fullname | default(user.name) }}"
    shell: "{{ user.shell | default('/bin/bash') }}"
    password: "{{ user.password_hash }}"
    update_password: "{{ user.update_password | default('always') }}"
    state: present
  when:
    # user.uid is set
    - user.uid is defined and user.uid != none and (user.uid | string | length > 0) 
    # User doesn't exist and its wanted uid is not already used
    # … or User exists and its uid matches the wanted uid
    - (_user_id_from_name.rc != 0 and _user_name_from_id.rc != 0) or (_user_id_from_name.rc == 0 and user.name == _user_name_from_id.stdout)


- name: "Unix account '{{ user.name }}' is present with random uid"
  ansible.builtin.user:
    name: "{{ user.name }}"
    comment: "{{ user.fullname | default(user.name) }}"
    shell: "{{ user.shell | default('/bin/bash') }}"
    password: "{{ user.password_hash }}"
    update_password: "{{ user.update_password | default('always') }}"
    state: present
  when:
    # user.uid is not set
    # … or User exists and its uid doesn't match the wanted uid
    - (not user.uid is defined) or (user.uid == none) or (user.uid | string | length <= 0) or (_user_id_from_name.rc == 0 and user.uid | string != _user_id_from_name | string)

- name: "Get user info for '{{ user.name }}'"
  ansible.builtin.getent:
    database: passwd
    key: "{{ user.name }}"
    fail_key: False

# =================
# Unix groups
# =================

- name: "Secondary groups are mixed for '{{ user.name }}'"
  ansible.builtin.set_fact:
    _secondary_groups: "{{ [project_users_main_group] | union(user.groups | default([])) | sort | unique | list }}"

- name: "Create secondary group ({{ _secondary_groups | join(',') }})"
  ansible.builtin.group:
    name: "{{ group }}"
    system: true
  loop: "{{ _secondary_groups }}"
  loop_control:
    loop_var: group

- name: "Add user {{ user.name }} to secondary groups ({{ _secondary_groups | join(',') }}"
  ansible.builtin.user:
    name: "{{ user.name }}"
    groups: "{{ _secondary_groups | join(',') }}"
    append: yes

## Group for SSH authorizations

- name: "Unix user {{ user.name }} belongs to group '{{ evolinux_ssh_group }}' (Debian 10 or later)"
  ansible.builtin.user:
    name: "{{ user.name }}"
    groups: "{{ evolinux_ssh_group | mandatory }}"
    append: yes
  when: ansible_distribution_major_version is version('10', '>=')

## Home protection

- name: "Home directory for '{{ user.name }}' is not accessible by group and other users"
  ansible.builtin.file:
    path: "/home/{{ user.name }}"
    mode: "{{ project_users_homedir_mode }}"
    state: directory
  when: ansible_facts.getent_passwd[user.name] != none

## SSH

- ansible.builtin.include: ssh.yml

## Evomaintenance

- name: "Evomaintenance trap is configured for '{{ user.name }}'"
  ansible.builtin.blockinfile:
    dest: "/home/{{ user.name }}/.profile"
    insertafter: EOF
    marker: "# {mark} ANSIBLE MANAGED EVOMAINTENANCE TRAP"
    content: "{{ project_evomaintenance_trap_command }}"
    state: "{{ (user.groups is defined and project_users_sudoers_group in user.groups) | ternary('present','absent') }}"
  when:
    - project_users_sudoers_group is defined
    - project_users_sudoers_group != none
    - project_users_sudoers_group | length > 0

- ansible.builtin.meta: flush_handlers

